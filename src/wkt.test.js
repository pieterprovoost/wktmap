import { parseWkt, fetchProj, extractAndParseCrs, transformInput, handleOtherFormats } from "./wkt";

describe("parseWkt", () => {
    it("parses wkt", () => {
        const wkt = "POINT (30 10)";
        const json = parseWkt(wkt, {epsg: 4326, proj: "+proj=longlat +datum=WGS84 +no_defs +type=crs"});
        expect(json).toEqual({
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [30, 10]
            },
            "properties": null
        });
    });
});        

describe("fetchProj", () => {
    it("fetches proj", () => {
        (async ()  =>{
            const proj = await fetchProj(4326);
            expect(proj).toEqual("+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees");
        })();
    });
});

describe("extractAndParseCrs", () => {
    it("extract and parse crs with wktliteral", () => {
        const { wktPart, crsPart, parsedEpsg } = extractAndParseCrs({
            wkt: "<http://www.opengis.net/def/crs/EPSG/0/31370> POINT (147859 171184)"
        });
        expect(wktPart).toEqual("POINT (147859 171184)");
        expect(crsPart).toEqual("<http://www.opengis.net/def/crs/EPSG/0/31370>");
        expect(parsedEpsg).toEqual("31370");
    });
    it("extract and parse crs with postgis srid", () => {
        const { wktPart, crsPart, parsedEpsg } = extractAndParseCrs({
            wkt: "SRID=6381;POLYGON ((876785 5714065, 880718 5702674, 882217 5699442, 882780 5699385, 882488 5702822, 883734 5703239, 889678 5699865, 891973 5701049, 892897 5700626, 895011 5701684, 895502 5701617, 896432 5700426, 897454 5701193, 897793 5700639, 897752 5701453, 900110 5702274, 900112 5703607, 901188 5703601, 900927 5704370, 903088 5704746, 903936 5704349, 903489 5705356, 904701 5705124, 904549 5705688, 904867 5705931, 901929 5706281, 900608 5705065, 900084 5705240, 899966 5705831, 899018 5705732, 898876 5706527, 898063 5706419, 897756 5707231, 896552 5706993, 892583 5707674, 892082 5707229, 890479 5707606, 888252 5706035, 886643 5707205, 886000 5706944, 885845 5705601, 884728 5705927, 884853 5707750, 884495 5707799, 885108 5711171, 886188 5710001, 887592 5711179, 886436 5711855, 886337 5712769, 887572 5711986, 887674 5712367, 889286 5712414, 889466 5711589, 891248 5711541, 891394 5712109, 890671 5712756, 891540 5712996, 891650 5713819, 891377 5714137, 892957 5715500, 892719 5715774, 893296 5716542, 894444 5716362, 895725 5715146, 897830 5715846, 899313 5715296, 900158 5715994, 899999 5715443, 900319 5715299, 899799 5713999, 902618 5713539, 902708 5714113, 906417 5714946, 906453 5716121, 907003 5716590, 907827 5716336, 907858 5715263, 909451 5716041, 909495 5716838, 911925 5717855, 915229 5717656, 915371 5716439, 917418 5715393, 920061 5712240, 920590 5708880, 921190 5707929, 921064 5706770, 920496 5706117, 921569 5705726, 921319 5705063, 921615 5704715, 923124 5705358, 923237 5705874, 924078 5704748, 926536 5705446, 927555 5704800, 931043 5705335, 930997 5706012, 935701 5705519, 936378 5706142, 938223 5704993, 939758 5705257, 941663 5704797, 943507 5704985, 943750 5706001, 947687 5705352, 949858 5706773, 951379 5706978, 952223 5705099, 953173 5704301, 955086 5703509, 955535 5703986, 957075 5703522, 957357 5704145, 958407 5703985, 963782 5705318, 965832 5706845, 965878 5708042, 963764 5710713, 963310 5713546, 963820 5714744, 965858 5714838, 966622 5715621, 964854 5716230, 965579 5718008, 963444 5720521, 964747 5721739, 966446 5721224, 967212 5722054, 966582 5723588, 962626 5726395, 959171 5725224, 958856 5726231, 959656 5727263, 959129 5728056, 959410 5728994, 956654 5728522, 954716 5729075, 954171 5729992, 948935 5733720, 950991 5736040, 949347 5740531, 949955 5740896, 948722 5741096, 944993 5744832, 941787 5746901, 939306 5747444, 936803 5749311, 936045 5748847, 936010 5746559, 934841 5746887, 933280 5748138, 932816 5747916, 933395 5746403, 932808 5745974, 929397 5746860, 925419 5747046, 926011 5746159, 925671 5745401, 924113 5744337, 923105 5744638, 922840 5743229, 922297 5742813, 921340 5743129, 921192 5744144, 920864 5744391, 919528 5744855, 919332 5744386, 917337 5743823, 917424 5743262, 916877 5742993, 917350 5742538, 917329 5741279, 916681 5740649, 917016 5739385, 914945 5739539, 914438 5740433, 912518 5739234, 912125 5740337, 910830 5739967, 911252 5738173, 907364 5739471, 907407 5740317, 906028 5743252, 906740 5743423, 906911 5744440, 906338 5745193, 906733 5745917, 905916 5747645, 904129 5746976, 903612 5745958, 901956 5744986, 901804 5743935, 900500 5744157, 899813 5743243, 899050 5743984, 898577 5742584, 897497 5742380, 897586 5739899, 895863 5738661, 892792 5740559, 892824 5738342, 892000 5737086, 891935 5736094, 892301 5735596, 892480 5733918, 891909 5733890, 890916 5730697, 885534 5732134, 883012 5730394, 882228 5728866, 881649 5728597, 881719 5727287, 884039 5727947, 884504 5723620, 885098 5721492, 882668 5715983, 881370 5715298, 880884 5715557, 881007 5716264, 876785 5714065))"
        });
        expect(wktPart).toEqual("POLYGON ((876785 5714065, 880718 5702674, 882217 5699442, 882780 5699385, 882488 5702822, 883734 5703239, 889678 5699865, 891973 5701049, 892897 5700626, 895011 5701684, 895502 5701617, 896432 5700426, 897454 5701193, 897793 5700639, 897752 5701453, 900110 5702274, 900112 5703607, 901188 5703601, 900927 5704370, 903088 5704746, 903936 5704349, 903489 5705356, 904701 5705124, 904549 5705688, 904867 5705931, 901929 5706281, 900608 5705065, 900084 5705240, 899966 5705831, 899018 5705732, 898876 5706527, 898063 5706419, 897756 5707231, 896552 5706993, 892583 5707674, 892082 5707229, 890479 5707606, 888252 5706035, 886643 5707205, 886000 5706944, 885845 5705601, 884728 5705927, 884853 5707750, 884495 5707799, 885108 5711171, 886188 5710001, 887592 5711179, 886436 5711855, 886337 5712769, 887572 5711986, 887674 5712367, 889286 5712414, 889466 5711589, 891248 5711541, 891394 5712109, 890671 5712756, 891540 5712996, 891650 5713819, 891377 5714137, 892957 5715500, 892719 5715774, 893296 5716542, 894444 5716362, 895725 5715146, 897830 5715846, 899313 5715296, 900158 5715994, 899999 5715443, 900319 5715299, 899799 5713999, 902618 5713539, 902708 5714113, 906417 5714946, 906453 5716121, 907003 5716590, 907827 5716336, 907858 5715263, 909451 5716041, 909495 5716838, 911925 5717855, 915229 5717656, 915371 5716439, 917418 5715393, 920061 5712240, 920590 5708880, 921190 5707929, 921064 5706770, 920496 5706117, 921569 5705726, 921319 5705063, 921615 5704715, 923124 5705358, 923237 5705874, 924078 5704748, 926536 5705446, 927555 5704800, 931043 5705335, 930997 5706012, 935701 5705519, 936378 5706142, 938223 5704993, 939758 5705257, 941663 5704797, 943507 5704985, 943750 5706001, 947687 5705352, 949858 5706773, 951379 5706978, 952223 5705099, 953173 5704301, 955086 5703509, 955535 5703986, 957075 5703522, 957357 5704145, 958407 5703985, 963782 5705318, 965832 5706845, 965878 5708042, 963764 5710713, 963310 5713546, 963820 5714744, 965858 5714838, 966622 5715621, 964854 5716230, 965579 5718008, 963444 5720521, 964747 5721739, 966446 5721224, 967212 5722054, 966582 5723588, 962626 5726395, 959171 5725224, 958856 5726231, 959656 5727263, 959129 5728056, 959410 5728994, 956654 5728522, 954716 5729075, 954171 5729992, 948935 5733720, 950991 5736040, 949347 5740531, 949955 5740896, 948722 5741096, 944993 5744832, 941787 5746901, 939306 5747444, 936803 5749311, 936045 5748847, 936010 5746559, 934841 5746887, 933280 5748138, 932816 5747916, 933395 5746403, 932808 5745974, 929397 5746860, 925419 5747046, 926011 5746159, 925671 5745401, 924113 5744337, 923105 5744638, 922840 5743229, 922297 5742813, 921340 5743129, 921192 5744144, 920864 5744391, 919528 5744855, 919332 5744386, 917337 5743823, 917424 5743262, 916877 5742993, 917350 5742538, 917329 5741279, 916681 5740649, 917016 5739385, 914945 5739539, 914438 5740433, 912518 5739234, 912125 5740337, 910830 5739967, 911252 5738173, 907364 5739471, 907407 5740317, 906028 5743252, 906740 5743423, 906911 5744440, 906338 5745193, 906733 5745917, 905916 5747645, 904129 5746976, 903612 5745958, 901956 5744986, 901804 5743935, 900500 5744157, 899813 5743243, 899050 5743984, 898577 5742584, 897497 5742380, 897586 5739899, 895863 5738661, 892792 5740559, 892824 5738342, 892000 5737086, 891935 5736094, 892301 5735596, 892480 5733918, 891909 5733890, 890916 5730697, 885534 5732134, 883012 5730394, 882228 5728866, 881649 5728597, 881719 5727287, 884039 5727947, 884504 5723620, 885098 5721492, 882668 5715983, 881370 5715298, 880884 5715557, 881007 5716264, 876785 5714065))");
        expect(crsPart).toEqual("SRID=6381");
        expect(parsedEpsg).toEqual("6381");
    });
});

describe("transformInput", () => {
    let input = {
        wkt: "GEOMETRYCOLLECTION (LINESTRING (9186323 5658308, 9199759 5613109))",
        epsg: "3857"
    };
    it("transforms to wkb", async () => {
        let output = await transformInput(input);
        expect(output.wkb).toEqual("010700000001000000010200000002000000000000608285614100000000B1955541000000E0118C6141000000408D695541");
    });
    it("transforms to ewkb", async () => {
        let output = await transformInput(input);
        expect(output.ewkb).toEqual("0107000020110F000001000000010200000002000000000000608285614100000000B1955541000000E0118C6141000000408D695541");
    });
});

describe("handleOtherFormats", () => {
    it("handles H3", async () => {
        const input = {
            wkt: "83194dfffffffff"
        };
        const message = handleOtherFormats(input);
        expect(message).toEqual("Converted H3 to WKT");
    });
    it("handles Quadkey", async () => {
        const input = {
            wkt: "012"
        };
        const message = handleOtherFormats(input);
        expect(message).toEqual("Converted Quadkey to WKT");
    });
    it("handles BBOX", async () => {
        const input = {
            wkt: "40.7,-74,40.8,-73"
        };
        const message = handleOtherFormats(input);
        expect(message).toEqual("Converted BBOX to WKT");
    });
    it("handles Geohash", async () => {
        const input = {
            wkt: "u147"
        };
        const message = handleOtherFormats(input);
        expect(message).toEqual("Converted Geohash to WKT");
    });
    it("handles WKB", async () => {
        const input = {
            wkt: "01010000001343723271CB094047E4BB94BA9A4940"
        };
        const message = handleOtherFormats(input);
        expect(message).toEqual("Converted WKB to WKT");
    });
});
